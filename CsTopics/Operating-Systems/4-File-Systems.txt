-------------------
| 4: File Systems | 
-------------------
- computer systems need to store and retrieve information
- requirements for long term info storage
1) Must be possible to store very large amount of info
2) Information must survive the termination of the process using it
3) Multiple processes must be able to access info at once
- File: logical units of information created by processes
  - info in files is persistent
  - managed by OS

---- Memory Notes ----
----------------------
- File: logical units of information created by processes



--------------------
---- 4.1: Files ----
--------------------

---- File Naming ----
---------------------
- a file is an abstraction mechanism to store and load info
- file name and file extension (indicates something about the file)

---- File Structure ----
------------------------
- file can be structured as byte sequence, record sequence, or as a tree
- byte sequence
  - unstructured
  - os does not know or care what is in the file, just sees the butes
  - used by unix and windows
  - provides a lot of flexibility
- record sequence      
  - sequence of fixed length records
  - read operations return one record and write operations overwrite/append one record
- tree based
  - file consists of tree of records, each contain key field in fixed position on the record
  - get the record with a specific key

---- File Types ----
--------------------
- regular files: contain user information
  - ascii/binary files
  - can easily edit
- directories: system files for maintaining structure of file system
- character special files: related to input/output
- block special files: used to model disks

---- File Access ----
---------------------
- random access files
- read operation can give position where to start reading
- seek can be used to set the current position
- can then read sequentially

---- File Attributes ----
-------------------------
- metadata describing properties of the file
  - protection, creator, time stats, ...

---- File Operations ----
- create, delete, open, close, read, write, append, seek, get attrs, set attrs, rename

---- Summary ----
- Files are a key primitive in operating systems. They are an abstraction over sequence of bytes
that provide convinent access without exposing the underlying hardware. There are various types of file
that you can create and each file has a bunch of attributes/metadata associated with it to describe important 
information about the file

--- Memory Notes ----
---------------------
- None




--------------------------
---- 4.2: Directories ----
--------------------------

---- Single level directory system ----
---------------------------------------
- one directory, root directory, containing all files
- simple and able to locate files quickly
- sufficient for very simple systems

---- Hierarchical Directory System ----
---------------------------------------
- tree of directories to group common files
- all modern file systems are organized in this manner

---- Path Names ----
--------------------
- absolute path name: all paths from root to file
- relative path name: path from working directory to file

---- Directory operations ----
------------------------------
- create, delete, opendir, closedir, readdir, rename, link, unlink


---- Summary ----
------------------
- All modern systems use a hierarchical directory system where you can arbitrarily create new 
files and directories whereever you want to group common information together

---- Memory Notes ----
----------------------
- N/A




-----------------------------------------
---- 4.3: File System Implementation ----
-----------------------------------------

---- 4.3.1: File System Layout ----
-----------------------------------
- file system stored on disks
- can divide disk into partitions w/ diff file systems on each partitions
- on older systems, the sector 0 of disk called MBR (master book record), used to boot computer
  - end of MBR contains parition table, starting/ending addrs for each parition
  - locate active partition and read in boot block, execute
  - program in book block loads os
  - superblock: contains all key parameters about file system
- next school as unified extensible firmeare interface
  - UEFI is now most popular way to boot personal computer system
  - fast booting, different architectures, disk size up to 8ZiB
  - looks for location of partition table in second block of device
  - first block is reserved as special market for software that expects MBR here
  - GPT (GUID Partition Table) contains info about location of various partitions on disk
    - contains the start and end of each parition
  - UEFI keeps backup of GPT in last block
  - firmware should support atleast FAT file system
  - EFI system partition (ESp) contains file system, boot process can use which contains programs, config files, etc 

---- 4.3.2: Implementing Files ----
-----------------------------------
- need to keep track of which disk blocks go with which file
1) Contiguous allocation
- store each file as contiguous run of disk blocks
- each file starts w/ brand new block
- simple to implement, just need disk addr of first block and num of blocks in file
- read performance is excellent, read in a single operation
- disk becomes very fragmented over time!!
  - need to compact which is way to expensive or maintain list of free spaces
2) Linked list allocation
- file is linked list of disk blocks
- first part of each block used as pointer to next one, rest of block for data
- no space is lost due to fragmentation
- random access is very slow, have to start from head and go through all prior blocks 
- storage no longer power of 2 since pointer takes up a few bytes
3) Linked-List Allocation Using a Table in memory
- can use prior approach and take pointer work from each block and put it in table in memory
- chain is terminaed with special market
- called FAT (file allocation table)
- chain still has to be followed for random access but it is in memory so it is much faster
- although, entire table must be in memory at all times 
4) I-Nodes (index node)
- lists the attributes and disk addresses of the files blocks
- given i-node, possible to find all blocks of the file
- i-node needs to be in memory only when file is open
- size proportional the maximum number of files that may be opened

---- 4.3.3: Implementing Directories ----
-----------------------------------------
- directory entry provides info needed to find disk blocks
  - map ASCII name of file onto info needed to locate the data
- two ways to structure: inline and in heap
1) Inline: file entry length, attributes, filename
2) Heap: pointer to file name, file attributes

---- 4.3.4: Shared Files ----
-----------------------------
- two solutions
1) disk blocks are not listed in directories
  - they are listed in little data structures associated with the file
  - ds could be something like an i-node
2) create a new file of type link
  - os just reads the original file

---- 4.3.5: Log-Structured File System ----
-------------------------------------------
- seek time is not improving
  - Log structured file system designed to alleivate this problem
- structure entire disk as a log
- periodically, all pending writes buffered in memory and written to disk as single contiguous segmenet
at end of the log
- at start of each segement is a segement summary
- cleaner thread for compacting
- bookkeeping is non trivial

---- 4.3.6: Journaling File Systems ----
----------------------------------------
- keep log of what file system is going to do before it does it
- first write log entry to disk, listing actions to be completed
- after written, can perform operations
- after operations done, log is erased
- idemopotent and atomic properties

---- 4.3.7: Flash based file systems ----
-----------------------------------------
- SSDs use flash memory, NAND based flash
- no moving parts so seek time and rotational delay do not exists
- access in microseconds, not milliseconds
- reads are (10s of microseconds) much faster than writes (100s of microseconds)
- read/write in unit of I/O (page/flash page) erase in unit of erase (block/flash block)
- to write
  - must first erase flash block, expensive (100s microseconds)
  - then write sequentially
- flash memory suffers wear
- Program/erase cycle (P/E cycle), erase then write, max endurance 1000s to few 100000s cycles 
  - spread out wear via Flash translation unit (FTL)
- FTL connected to flash pacakges which ultimately contain the flash pages/flash blocks
- to access specific page, need to address corresponding die on flash package
  - on the die then the right plane, block, and page (complicated hierarchical address)
- FTL uses translation tables to translate addresses
  - has two types of mappings: per page and per block
- ocasionally does garbage collection to free up space
  - TRIM command helps SSD be certain some flash pages are now free
- log structured file systems are good for flash based storage


---- 4.3.8: Virtual File Systems ----
-------------------------------------
- concept to try to integrate multiple file systems into an orderly structure
  - abstract out common part and put it in separate layer that calls the underlying systems
- syscalls directed to VFS for initial processing then sent to concrete file system (VFS interface)
- on system boot, VFS registers root file system and other file systems are mounted when they are loaded
  - register = provider list of adds of functions VFS requires


---- Memory Notes ----
----------------------
- 


---- Summary ----
-----------------
- 




------------------------------------------------------
---- 4.4: File System Management and Optimization ----
------------------------------------------------------

---- 4.4.1: Disk Space Management ----
--------------------------------------
- can store as n consecutive bytes of disk space, or split up into a number of blocks
- files are stored in fixed sized blocks, but how big should those blocks be?
  - candidates are page size or size of flash page
  - common convention is 4kb
  - conflict between page size, data rate, and disk space utilization
- two methods to keep track of free blocks
1) linked list of disk blocks, each block holds as man<F3> free disk block numbers as it will fit
  - free blocks are used to hold free list, so storage is essentially free
2) bitmap, disk with n blocks requires bitmap with n bits
  - freeblock = 1, allocated = 0
- the correct solution is often just a game of tradeoffs
- mechanims for enforcing disk quotas
  - administrator assigns each user max allotment of files/blocks
  - table containing quota record for every user w/ open file

---- 4.4.2: File System Backup ----
-----------------------------------
- file system recovery expensive, time consuming, and can be impossible
- backs handle recovery from disaster and recovery from user mistakes
1) physical dump: start at block 0, write all blocks to backup in order, stop when it has copied last one
2) logical dump: start at one or more specified directories, recursively dumps all files/dirs found there that have changed


---- 4.4.3: File System Consistency ----
----------------------------------------
- if system crashes before all modified blocks are written, it is left in inconsistent state
- programs to check for consistency (fsck on unix)
  - verify each file system independently of the other ones
- two kinds of consistency checks
1) blocks
  - two tables to count each block 
  - one count for number present in files and one in free list
  - if consistent, each block will have a 1 in one of the tables
  - block may be missing or duplicated in free/data 
2) files
  - scan and store usage count and then compare to value in inode

---- 4.4.4: File System Performance ----
----------------------------------------
- block cache/buffer cache
  - blocks that are kept in memory for performance reasons
  - check if block in memory first
  - hash device/disk addr and look up result in hash table to access block in memory
    - same hash value chained together on linked list
  - now need good cache replacement algorithm
  - sync() system call, running every 30 seconds to force all modified blocks to disk
  - (page cache and buffer cache)
- block ahead read
  - try to get blocks to cache before they are needed
  - optimistically hope a block is needed
- reducing disk arm motion
  - put blocks that are likely to be accessed in sequence next to each other
  - keep track of blocks as groups

---- 4.4.5: Defragmenting Disks ----
------------------------------------
- as time goes on disk gets filled with holes/gaps
  - blocks spread all over giving poor performance
- can restore performance by moving files to make them contiguous and group free space
- in linux (ext3 and ext4) less fragmentation so rarely required
- SSD do not suffer fragmentation at all

---- 4.4.6: Compression and Deduplication ----
----------------------------------------------
- can compress data via looking for repeating sequences of data and encoding it 
- deduplication to eliminate duplicate copies
  - done inline or post process
1) inline: hash calculated for every chunk it is about to write and compared to existing ones
  - just add reference if it already exists
2) post process: writes out data nd performs hashing/comparisons in background
  - does not slow down the file operation

---- 4.4.7: Secure File Deletion and Disk Encryption ----
---------------------------------------------------------
- it is very hard to truly delete all data without completely demolisting the disk
  - usually overwriting entire disk with 3-7 passes alternating 0 and random numbers will securly erase it though
- can use full disk encryption
  - advanced encryption standard (AES)


----- FINISH THIS CHAPTER ----














































