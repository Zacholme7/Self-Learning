-------------------
| 5: Input/Output | 
-------------------

-----------------------------------------
---- 5.1: Principles of I/O Hardware ----
-----------------------------------------
- EE look at in term of chips/wries/power supplies/...
- Programmers look at interfaces presented to software

---- 5.1.1: I/O Devices ----
----------------------------
- block devices: stores information in fixed size blocks
  - each has own address, 512 - 65536 bytes
  - transfer in units of one or more blocks
  - *can read/write each block independently*
- character device: delivers or accepts a stream of characters
  - not addressable and does not have seek operation

---- 5.1.2: Device Controllers ----
-----------------------------------
- Electronic component (device controller/adapter)
  - usually a chip
- Mechanical component
  - in the device itself
- generally the job of the controller is to facilitate the flow of bites/bytes between computer and i/o device
  - makes life easier for the programmer

---- 5.1.3: Memory-Mapped I/O ----
----------------------------------
- each controller has registers that are used for communicating with cpu
- by writing to registers, os can command device to perform certain actions and deliver/accpet data
- many devices also have data buffer that os can read and write
- issues with how CPU communicates with control registers and device data buffers
  - 1) each control reg has I/O port number, all form I/O port space, special I/O instr is used to read/write form I/O
    - addr space for memory and I/O are different
  - 2) map control registers into memory space, each has unique memory address where no memory is assigned 
    - this is memory-mapped I/O
    - have to disable cachine for memory region
- when CPU wants to read word, puts addr on bus and asserts READ signal
  - second control line used to signal I/O or memory space

---- 5.1.4: Direct Memory Access ----
-------------------------------------
- DMA (direct memory access) used to get data from I/O controller
  - has memory addr register, byte count register, 1+ control registers. can all be read/written by cpu
- acts as a big brain
- can operate in word at a time mode and block mode
- cycle stealing: device controller can steal occasional bus cycles from CPU once in a while
- burst mode: DMA controller tells device to acquire the bus and issues a series of transfers then release the bus
- fly-by mode: DMA controller tells device controller to transfer data direclty to main memory
- most DMA controllers use phyical memory addreses for their transfers

---- 5.1.5: Interrupts Revisited ----
-------------------------------------
- trap: deliberate action by program code (trap into kernel for sys call)
- fault/exception: similar to trap but not deliberate (segfault)
- hardware interrupt: interrupt send by hardware such as printer, network, ...
- when I/O Device finished, causes an interrupt by asserting signal on bus line.
  - signal detected by interrupt controller chip which decides what to do 
  - controller puts number on addr line specifying which devices and asserts signal to interrupt CPU
  - number on addr line is used to index into interrupt vector which then runs interrupt service routine
  - ISR acknowledges I/O by writing value to controllers I/O port, tells it that it can issue another interrupt
  - current process info is saved on the stack
- precise interrupt: leaves machine in well defined state
  - Pc is saved to known place
  - all instrs before the one pointed to by pc have completed
  - no instrs beyond one pointed to by PC has finished
  - execution state of instr pointed to by the PC is known



-----------------------------------------
---- 5.2: Principles of I/O Software ----
-----------------------------------------


---- 5.2.1: Goals of the I/O Software ----
------------------------------------------
- device independence: should be able to write programs that can access any I/O device without 
having to specify it in advanced
- uniform naming: name of device should not depend on device in any way
- errors should be handled as close to the hardware as possible
- synchronous (blocking) vs asynchronous (interrupt driven) I/O
  -physical I/O is async

---- 5.2.2: Programmed I/O ----
-------------------------------
- programmed I/O: just have the cpu do all the work

---- 5.2.3: Interrupt-Driven I/O ----
-------------------------------------
- allow cpu to do something else during I/O and handle the I/O when it is completed 
  - interrupt will notify the cpu

---- 5.2.4: I/O Using DMA ----
------------------------------
- DMA controller handles all of the I/O instead of the CPU
- need special hardware but cpu can do other work




----------------------------------
---- 5.3: I/O Software Layers ----
----------------------------------
1) User level I/O software
2) device indepenent operating system software
3) Device drivers
4) interrupt handlers

---- 5.3.1: Interrupt Handlers ----
-----------------------------------
- very complex and expensive progress to handle an interrupt
1) save any registers that have not been saved
2) set up context for ISR
3) set up stack for ISR
4) ack the interrupt controller
5) copy registers from where they were saved to process table
6) run the ISR
7) choose which process to run next
8) setup mmu for the next process
9) load the new processes registers
10) start running the new process

---- 5.3.2: Device Drivers ----
-------------------------------
- device registers and commands are very different from each other
- device driver: device specific code for controlling it
- user process -> os -> driver -> controller -> device
- os classifies drivers into categories (block or character devices)
  - have an interface for each that must be supported
- 























