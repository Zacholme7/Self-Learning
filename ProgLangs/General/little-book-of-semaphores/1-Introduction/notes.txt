--------
| 1: Introduction |
------

-----
---- 1.1 Synchronization ----
-----
- in computer systems synchronization refers to relationship among events
        - the order of events
                - serialization: A must happen before B 
                - mutual exclusion: A and B must not happen at the same time
- need a method to enforce synchronization constraints

-----
---- 1.2 Execution Model ----
-----
- simplest model -> execute sequentially, one instr after another
        - synchronization is trivial here, just look at the order of occurence
- it gets more complex when multiple processors are running or single processor running many threads
- How can you ensure you eat lunch before Bob?
        - call Bob and tell him when you eat lunch!

-----
---- 1.3 Serialization with Messages ----
-----
- message passing is important in synchronization problems
- 'two events are concurrent if we cannot tell by looking at the program which will happen first'

-----
---- 1.4: Non-determinism
-----
- not possible to tell, by looking at program, what will happen when it executes
        - interleaving/order of execution up to scheduler

-----
---- 1.5: Shared Variables
-----
- most variable are local which leads to few synchronization problems
- variables that are shared among two or more threads lead to problems  
        - this is one way in which threads interact with each other

---- 1.5.1 Concurrent writes ----
-----
- pretend two threads are writing to a variable at the same time        
        - what is the final value? well.. it depends on the order in which the statements are executed
        - depended on the 'execution path'

---- 1.5.2: Concurrent updates ----
-----
- update -> operation that reads value or var, computes new value, and writes new value
        - takes two steps, a read and a write
- an operation that cannot be interrupted is atomic, executes fully or not at all

---- 1.5.3: Mutual exclusion with messages ----
-----
- mutual exclusion can be implemented via message passing
        - when you no longer need access to shared resource, send message making this known
        - message will signal the shared resource is free for one other single person to access

