
------
| Managing threads
----

----
---- 2.1: Basic thread managment
---- 

--- 2.1.1: Launching a new thread
----
- every program has atleast one thread, the main thread
- thread started via constructing 'std::thread' object w/ task
- when dealing with temporatires, make sure you are not defining a function
- once you start thread, need to explicitly wait for it to finish or leave it to run (via detaching)
    - have to make sure the data it accesses is valid until it returns


--- 2.1.2: Waiting for a thread to complete
----
- call 'join()' on the 'std::thread' instance to wait for a thread to complete
- cleans up any storage associated with that thread
- can only call 'join()' once, thread is no longer joinable after

--- 2.1.3: Waiting in exceptional circumstances ----
----
- need to call 'join()' or 'detach()' before the 'std::thread' object is destroyed
- 'join()' liable to be skipped if exception thrown, have to guard against all cases
- can leverage RAII to make sure threads are waited for 

---- 2.1.4: Running threads in the background ---- 
----
- calling 'detach()' leaves the thread to run in the background
    - no direct means of communicating with it
    - can no longer wait for it to complete and cannot obtain reference to it
- called daemon threads

---- Memory Notes ----
----
-

---- Summary ----
----
-



----
---- 2.2: Passing arguments to a thread function
----
- arguments are COPIED into internal storage and then passed to callable object/function as rvalue
    - occurs even if parameter is expecting a reference
- will copy first, covert later. type conversion happens in the context of the new thread
- if you want to pass non const reference, need to use 'std::ref'
    - std::thread copies arguments, but references cannot be copied
- if only one owner at a time, can use 'std::move'

---- Memory Notes ----
----
-

---- Summary ----
----
-


----
---- 2.3: Transferring ownership of a thread
----
- 'std::thread' as move support
- lots of resource owning types are movable but not copyable
- cannot drop a thread by assigning new value to std::thread obj that manages it
- since move is supported, can return std::thread from function and pass it as argument to function

---- Memory Notes ----
----
-

---- Summary ----
----
-



----
---- 2.4: Choosing the number of threads at runtime
----
- 'std::thread::hardware_concurrency' -> returns indication of number of threads that can run concurrent
- only a hint

---- Memory Notes ----
----
-

---- Summary ----
----
-




----
---- 2.5: Identifiying threads
----
- thread identifies are of type 'std::thread::id'
- can call 'get_id()' on thread object
- can call 'std::this_thread::get_id();
- can be copied and compared
- support all comparision operations













